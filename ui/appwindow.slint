import { Button, VerticalBox , HorizontalBox, GridBox, ListView} from "std-widgets.slint";
import { Theme } from "./theme.slint";

struct Size {
    width: int,
    height: int
}

struct SPiece {
    blocks: [[color]],
    is_I: bool,
    is_O: bool
}

component ShadedBox inherits Rectangle {
    padding: 20px;

    background: Theme.palette.primary;

    border-radius: 10px;
    drop-shadow-blur: 20px;
    drop-shadow-color: Theme.palette.secondary;
}

component Block inherits Rectangle {
    in property <color> block_color ;
    in property <length> size;

    width: size;
    height: size;
    background: block-color; 
    border-width: size / 12;
    border-color: block-color.darker(0.3);
    border-radius: size / 4;
}

export global GameAdapter { 
    in property <Size> grid_size;
    in property <[[color]]> grid;
    in property <SPiece> next_piece;
    in property <SPiece> held_piece;
    in property <int> score: 0;
}

component GridBlockDisplay inherits VerticalLayout {
    in property <Size> grid_size;
    in property <[[color]]> grid;
    in property <length> block_size: 28px;

    padding: 4px;
    spacing: 2px;
    for y in grid-size.height : HorizontalLayout {
        spacing: 2px;
        for x in grid-size.width : Block {
            block-color: grid[y][x];
            size: block-size;
        }
    }
}

component HUDOverlay inherits Rectangle {
    in-out property <float> background-opacity: 0.3;

    background: rgba(100, 100,100, background-opacity);
    border-radius: 10px;

    animate background { 
        duration: 500ms;
    }
}

export component PieceDisplay inherits HorizontalLayout {
    in property <SPiece> piece;

    width: 18px * 5;
    alignment: center;
    padding-top: piece.is-I ? -9px : 4px;
    GridBlockDisplay { 
        grid-size: {
            width: piece.is-I ? 4 : piece.is-O ? 2 : 3, 
            height: 2
        };
        block-size: 18px;
        padding: 0px;

        grid: piece.blocks;
    }
}

export component AppWindow inherits Window {
    callback key-pressed(string);
    forward-focus: key-handler;

    key-handler := FocusScope {
        key-pressed(event) => {
            root.key-pressed(event.text);
            return accept;
        }
        Rectangle {
            background: Theme.palette.primary;
            
            VerticalLayout {
                padding: 12px;
                HorizontalLayout { // Top section
                    spacing: 24px;
                    VerticalLayout {
                        spacing: 8px;
                        HorizontalLayout {
                            alignment: space-around;
                            Text {
                                text: "NEXT";
                                color: Theme.palette.text;
                                letter-spacing: Theme.textStyle.letter-spacing;
                            }
                            Text {
                                text: "HOLD";
                                color: Theme.palette.text;
                                letter-spacing: Theme.textStyle.letter-spacing;
                            }
                        }
                        HorizontalLayout {
                            alignment: stretch;
                            ShadedBox {
                                height: 60px;

                                HorizontalBox {
                                    alignment: space-around;

                                    PieceDisplay {
                                        piece: GameAdapter.next-piece;
                                    }

                                    PieceDisplay {
                                        piece: GameAdapter.held-piece;
                                    }
                                }
                            }
                        }
                    }
                    VerticalLayout {
                        alignment: stretch;
                        spacing: 8px;
                        Text {
                            text: "SCORE";
                            horizontal-alignment: center;
                            horizontal-stretch: 1;
                            color: Theme.palette.text;
                            letter-spacing: Theme.textStyle.letter-spacing;
                        }
                        ShadedBox {
                            vertical-stretch: 2;
                            Text {
                                text: GameAdapter.score;
                                color: Theme.palette.text;
                                font-size: 24px;
                                font-weight: 600;
                            }
                        }
                    }
                }

                spacing: 24px;

                ShadedBox {
                    GridBlockDisplay {
                        grid_size <=> GameAdapter.grid_size;
                        grid <=> GameAdapter.grid;
                    }
                    HUDOverlay {

                    }
                }

                HorizontalLayout {

                }
            }
        }
    }
}
